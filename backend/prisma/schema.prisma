generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String          @id @default(uuid())
  intra42Id               Int             @unique
  createdAt               DateTime        @default(now())

  profile                 Profile?
  preferences             Preferences?
  sensitiveData           SensitiveData?

  friends                 Friendship[]    @relation("UserToFriendship")
  friendOf                Friendship[]    @relation("FriendshipToUser")

  sentFriendRequests      FriendRequest[] @relation("SenderToFriendRequest")
  receivedFriendRequests  FriendRequest[] @relation("ReceiverToFriendRequest")

  bannedUsers             Ban[]           @relation("UserToBan")
  bannedBy                Ban[]           @relation("BanToUser")

  sentMessages            MessageDm[]     @relation("SenderToMessageDm")
  receivedMessages        MessageDm[]     @relation("ReceiverToMessageDm")

  gameRecords             GameRecord[]    @relation("UserToGameRecord")
  ogameRecords            GameRecord[]    @relation("OpponentToGameRecord")

  joinedGroups            UserGroup[]

  ownedGroups             Group[]         @relation("OwnerToGroup")
  bannedGroups            Group[]         @relation("BannedUserToGroup")

  sentGroupMessages       MessageGroup[]

  receivedGroupRequests   GroupInvite[]

}

enum Status {
  ONLINE
  PLAYING
  OFFLINE
}

model Profile {
  id            String     @id
  updatedAt     DateTime   @updatedAt

  name          String     @unique
  status        Status     @default(OFFLINE)
  avatarType    String     @default("image/jpeg")
  wins          Int        @default(0)
  losses        Int        @default(0)

  achievements  Achievement[]

  user          User       @relation(fields: [id], references: [id], onDelete: Cascade)
}

enum AchievementType {
  FIRST_GAME
}

model Achievement {
  type            AchievementType
  title           String
  description     String

  user            Profile         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String

  @@id([userId, type], name: "AchievementId")
}

model Preferences {
  id                                String    @id
  updatedAt                         DateTime  @updatedAt

  isTwoFactorAuthenticationEnabled  Boolean   @default(false)

  user                              User      @relation(fields: [id], references: [id], onDelete: Cascade)
}

model SensitiveData {
  id                            String    @id
  updatedAt                     DateTime  @updatedAt

  twoFactorAuthenticationSecret String?
  iv                            String?

  user                          User      @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Friendship {
  createdAt DateTime @default(now())

  user      User     @relation(name: "UserToFriendship", fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  friend    User     @relation(name: "FriendshipToUser", fields: [friendId], references: [id], onDelete: Cascade)
  friendId  String

  @@id([userId, friendId], name: "FriendshipId")
}

model FriendRequest {
  createdAt   DateTime @default(now())

  sender      User     @relation(name: "SenderToFriendRequest", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String

  receiver    User     @relation(name: "ReceiverToFriendRequest", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String

  @@id([senderId, receiverId], name: "FriendRequestId")
}

model Ban {
  createdAt     DateTime  @default(now())

  user          User      @relation(name: "UserToBan", fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  bannedUser    User      @relation(name: "BanToUser", fields: [bannedUserId], references: [id], onDelete: Cascade)
  bannedUserId  String

  @@id([userId, bannedUserId], name: "BanId")
}

model MessageDm {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())

  sender      User     @relation(name: "SenderToMessageDm", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String

  receiver    User     @relation(name: "ReceiverToMessageDm", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String

  message     String
}

model GameRecord {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())

  user          User      @relation(name: "UserToGameRecord", fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  opponent      User      @relation(name: "OpponentToGameRecord", fields: [opponentId], references: [id], onDelete: Cascade)
  opponentId    String

  userScore     Int
  opponentScore Int
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  MEMBER_MUTED
}

model UserGroup {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String

  role      Role

  @@id([userId, groupId], name: "UserGroupId")
}

enum GroupType {
  PRIVATE
  PUBLIC
  PROTECTED
}

model Group {
  id            String                @id @default(uuid())
  creatAt       DateTime              @default(now())

  name          String                @unique
  type          GroupType
  sensitiveData GroupSensitiveData?
  
  owner         User                  @relation(name: "OwnerToGroup", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String

  members       UserGroup[]
  bannedUsers   User[]                @relation("BannedUserToGroup")

  messages      MessageGroup[]
  requests      GroupInvite[]
}

model MessageGroup {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())

  sender      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String

  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String

  message     String
}

model GroupSensitiveData {
  id        String    @id
  creatAt   DateTime  @default(now())

  password  String?

  group     Group     @relation(fields: [id], references: [id], onDelete: Cascade)
}

model GroupInvite {
  createdAt   DateTime @default(now())

  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String

  receiver    User     @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String

  @@id([groupId, receiverId], name: "GroupInviteId")
}