generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String          @id @default(uuid())
  intra42Id               Int             @unique
  createdAt               DateTime        @default(now())

  profile                 Profile?
  preferences             Preferences?
  sensitiveData           SensitiveData?

  friends                 Friendship[]    @relation("UserToFriendship")
  friendOf                Friendship[]    @relation("FriendshipToUser")

  sentFriendRequests      FriendRequest[] @relation("SenderToFriendRequest")
  receivedFriendRequests  FriendRequest[] @relation("ReceiverToFriendRequest")
}

enum Status {
  ONLINE
  OFFLINE
}

model Profile {
  id        String    @id
  updatedAt DateTime  @updatedAt

  name      String    @unique
  status    Status    @default(OFFLINE)

  user      User      @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Preferences {
  id                                String    @id
  updatedAt                         DateTime  @updatedAt

  isTwoFactorAuthenticationEnabled  Boolean   @default(false)

  user                              User      @relation(fields: [id], references: [id], onDelete: Cascade)
}

model SensitiveData {
  id                            String    @id
  updatedAt                     DateTime  @updatedAt

  twoFactorAuthenticationSecret String?
  iv                            String?

  user                          User      @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Friendship {
  createdAt DateTime @default(now())

  user      User     @relation(name: "UserToFriendship", fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  friend    User     @relation(name: "FriendshipToUser", fields: [friendId], references: [id], onDelete: Cascade)
  friendId  String

  @@id([userId, friendId], name: "FriendshipId")
}

model FriendRequest {
  createdAt DateTime @default(now())

  sender    User     @relation(name: "SenderToFriendRequest", fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String

  receiver  User     @relation(name: "ReceiverToFriendRequest", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String

  @@id([senderId, receiverId], name: "FriendRequestId")
}