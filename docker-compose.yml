version: '3.8'

services:
  # backend for development
  development:
    build:
      context: ./backend
      target: development
      dockerfile: ./Dockerfile
    depends_on:
      database:
        condition: service_healthy
      database-client:
        condition: service_healthy
    image: backend_development
    container_name: backend_development
    hostname: $BACKEND_HOST
    restart: unless-stopped
    networks: [backend-network]
    expose: [$BACKEND_PORT]
    ports: [$BACKEND_PORT:$BACKEND_PORT]
    volumes: ['./backend:/usr/src/app']
    environment:
      DATABASE_URL: "postgresql://$DATABASE_USER:$DATABASE_PASSWORD@$DATABASE_HOST:$DATABASE_PORT/$DATABASE_NAME?schema=public"
      BACKEND_HOST: $BACKEND_HOST
      BACKEND_PORT: $BACKEND_PORT
      FRONTEND_URL: $FRONTEND_URL
      INTRA42_CLIENT_ID: $INTRA42_CLIENT_ID
      INTRA42_CLIENT_SECRET: $INTRA42_CLIENT_SECRET
      INTRA42_CALLBACK_URL: $INTRA42_CALLBACK_URL
      JWT_SECRET: $JWT_SECRET
  # backend for production
  production:
    build:
      context: ./backend
      target: production
      dockerfile: Dockerfile
    depends_on:
      database:
        condition: service_healthy
    image: backend_production
    container_name: backend_production
    hostname: $BACKEND_HOST
    restart: unless-stopped
    networks: [backend-network]
    expose: [$BACKEND_PORT]
    ports: [$BACKEND_PORT:$BACKEND_PORT]
    environment:
      DATABASE_URL: "postgresql://$DATABASE_USER:$DATABASE_PASSWORD@$DATABASE_HOST:$DATABASE_PORT/$DATABASE_NAME?schema=public"
      BACKEND_HOST: $BACKEND_HOST
      BACKEND_PORT: $BACKEND_PORT
      FRONTEND_URL: $FRONTEND_URL
      INTRA42_CLIENT_ID: $INTRA42_CLIENT_ID
      INTRA42_CLIENT_SECRET: $INTRA42_CLIENT_SECRET
      INTRA42_CALLBACK_URL: $INTRA42_CALLBACK_URL
      JWT_SECRET: $JWT_SECRET
  # backend for testing
  test:
    build: 
      context: ./backend
      target: build
      dockerfile: Dockerfile
    depends_on:
      database:
        condition: service_healthy
    image: backend_test
    container_name: backend_test
    hostname: $BACKEND_HOST
    restart: unless-stopped
    networks: [backend-network]
    expose: [$BACKEND_PORT]
    environment:
      DATABASE_URL: "postgresql://$DATABASE_USER:$DATABASE_PASSWORD@$DATABASE_HOST:$DATABASE_PORT/$DATABASE_NAME?schema=public"
      BACKEND_HOST: $BACKEND_HOST
      BACKEND_PORT: $BACKEND_PORT
      FRONTEND_URL: $FRONTEND_URL
      INTRA42_CLIENT_ID: $INTRA42_CLIENT_ID
      INTRA42_CLIENT_SECRET: $INTRA42_CLIENT_SECRET
      INTRA42_CALLBACK_URL: $INTRA42_CALLBACK_URL
      JWT_SECRET: $JWT_SECRET
  # database
  database:
    image: postgres:15-alpine
    container_name: database
    hostname: $DATABASE_HOST
    restart: unless-stopped
    expose: [$DATABASE_PORT]
    volumes: [database-data:/var/lib/postgresql/data]
    networks: [backend-network]
    environment:
      POSTGRES_USER: $DATABASE_USER
      POSTGRES_PASSWORD: $DATABASE_PASSWORD
      POSTGRES_DB: $DATABASE_NAME
      PGPORT: $DATABASE_PORT
    healthcheck:
      test: pg_isready -U $DATABASE_USER -d $DATABASE_NAME
      interval: 1s
      retries: 5
      start_period: 2s
  # database client
  database-client:
    depends_on:
      database:
        condition: service_healthy
    image: dbeaver/cloudbeaver:23.0.4
    container_name: database-client
    restart: unless-stopped
    expose: [8978]
    ports: [8978:8978]
    networks: [backend-network]
    volumes: [database-client-data:/opt/cloudbeaver/data]
    healthcheck:
      test: curl -f http://localhost:8978
      interval: 1s
      retries: 5
      start_period: 2s

networks:
  backend-network:
    name: backend-network

volumes:
  database-data:
    name: database-data
  database-client-data:
    name: database-client-data